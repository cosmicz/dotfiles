#!/usr/bin/ruby -Ku
# -*- coding: utf-8 -*-

#
# tinycipher
#
# Little encryption tools for personal use
#
# Usage:
#   $ tinycipher FLAG DATA PASSWORD
#
#   FLAG: operation flag.
#     -e  encrypt
#     -d  decrypt
#
#   DATA: data string.
#
#   PASSWORD: password for encrypt or decrypt.
#

require 'logger'
require 'openssl'

#
# 定数
#

# 引数チェック
ARG_REQUIRE_LENGTH = 3

# 暗号化/復号化指定フラグ
ARG_FLAG_ENCRYPT = "-e"
ARG_FLAG_DECRYPT = "-d"

#
# クラス
#

class KeePassCrypto
  CIPHER_ALGORITHM = "aes-256-cbc"

  def self.encrypt(plain, pw)
    cipher = OpenSSL::Cipher.new(CIPHER_ALGORITHM)
    cipher.encrypt
    cipher.pkcs5_keyivgen(pw)
    enc = cipher.encrypt.update(plain) + cipher.final
    
    enc_hex = enc.unpack("H*")
    
    enc_hex[0]
  end

  def self.decrypt(coded, pw)
    coded = [coded].pack("H*")
    
    cipher = OpenSSL::Cipher.new(CIPHER_ALGORITHM)
    cipher.decrypt
    cipher.pkcs5_keyivgen(pw)
    #dec = cipher.decrypt.update(coded) + cipher.final
  end
end

#
# 関数
#

def usage
end

#
# 処理
#

$log = Logger.new(STDOUT)
$log.level = Logger::INFO

if ARG_REQUIRE_LENGTH > ARGV.length then
  $log.error("Argument is missing .")
  exit
end

flag = ARGV[0]
data = ARGV[1]
pwd = ARGV[2]

$log.debug("flag: #{flag}")
$log.debug("data: #{data}")
$log.debug("pwd: #{pwd}")

case flag
when ARG_FLAG_ENCRYPT
  $log.debug("encrypt")
  coded = KeePassCrypto.encrypt(data, pwd)
  p coded
when ARG_FLAG_DECRYPT
  $log.debug("decrypt")
  plain = KeePassCrypto.decrypt(data, pwd)
  p plain
else
  $log.error("unknown flag '#{flag}'")
  exit
end
